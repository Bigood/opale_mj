<?xml version="1.0" encoding="UTF-8"?>
<sm:binaryXhtmlTransf xmlns:sc="http://www.utc.fr/ics/scenari/v3/core" xmlns:sm="http://www.utc.fr/ics/scenari/v3/modeling">
	<sm:model sc:refUri="/binaries/png/png.model"/>
	<sm:axis code="inline"/>
	<sm:content>
		<sm:choose>
			<sm:when sc:refUri="/aurora/web/cnd/bin/isDeco.cond">
				<sm:choose>
					<sm:when sc:refUri="/aurora/web/cnd/bin/isInLabel.cond">
						<sm:chooseOnBinary>
							<sm:binary>
								<sm:imageSize>
									<sm:scaleFromStandardCharSize>
										<sm:ifNoStandardCharSize>
											<sm:scale ratio="0.32"/>
										</sm:ifNoStandardCharSize>
									</sm:scaleFromStandardCharSize>
								</sm:imageSize>
							</sm:binary>
							<sm:whenSize widthOver="genProp('bin.size.label-int',100)*1.1" heightOver="genProp('bin.size.label-int',100)*1.1">
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.label-int',100)" maxHeightInPx="genProp('bin.size.label-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt/>
									<sm:declareSize/>
								</sm:WImage>
							</sm:whenSize>
							<sm:otherwise>
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.label-int',100)" maxHeightInPx="genProp('bin.size.label-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt/>
									<sm:declareSize/>
								</sm:WImage>
							</sm:otherwise>
						</sm:chooseOnBinary>
					</sm:when>
					<sm:otherwise>
						<sm:chooseOnBinary>
							<sm:binary>
								<sm:imageSize>
									<sm:scaleFromStandardCharSize>
										<sm:ifNoStandardCharSize>
											<sm:scale ratio="0.32"/>
										</sm:ifNoStandardCharSize>
									</sm:scaleFromStandardCharSize>
								</sm:imageSize>
							</sm:binary>
							<sm:whenSize widthOver="genProp('bin.size.inline.w-int',400)*1.1" heightOver="genProp('bin.size.inline.h-int',100)*1.1">
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.inline.w-int',400)" maxHeightInPx="genProp('bin.size.inline.h-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt/>
									<sm:declareSize/>
								</sm:WImage>
							</sm:whenSize>
							<sm:otherwise>
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.inline.w-int',400)" maxHeightInPx="genProp('bin.size.inline.h-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt/>
									<sm:declareSize/>
								</sm:WImage>
							</sm:otherwise>
						</sm:chooseOnBinary>
					</sm:otherwise>
				</sm:choose>
			</sm:when>
			<sm:otherwise>
				<sm:choose>
					<sm:when sc:refUri="/aurora/web/cnd/bin/isInLabel.cond">
						<sm:chooseOnBinary>
							<sm:binary>
								<sm:imageSize>
									<sm:scaleFromStandardCharSize>
										<sm:ifNoStandardCharSize>
											<sm:scale ratio="0.32"/>
										</sm:ifNoStandardCharSize>
									</sm:scaleFromStandardCharSize>
								</sm:imageSize>
							</sm:binary>
							<sm:whenSize widthOver="genProp('bin.size.label-int',100)*1.1" heightOver="genProp('bin.size.label-int',100)*1.1">
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.label-int',100)" maxHeightInPx="genProp('bin.size.label-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt>
										<sm:callBinaryMeta axis="altTitle"/>
									</sm:alt>
									<sm:declareSize/>
									<sm:linkOverImage class="imgZoom noTitle">
										<sm:binaryUrl>
											<sm:imageTransform>
												<sm:scaleFromStandardCharSize>
													<sm:ifNoStandardCharSize>
														<sm:scale ratio="0.32"/>
													</sm:ifNoStandardCharSize>
												</sm:scaleFromStandardCharSize>
												<sm:sizeBounds maxWidthInPx="genProp('bin.size.zoom-int',1200)" maxHeightInPx="genProp('bin.size.zoom-int',1200)"/>
												<sm:outputPNG/>
											</sm:imageTransform>
										</sm:binaryUrl>
									</sm:linkOverImage>
								</sm:WImage>
							</sm:whenSize>
							<sm:otherwise>
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.label-int',100)" maxHeightInPx="genProp('bin.size.label-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt>
										<sm:callBinaryMeta axis="altTitle"/>
									</sm:alt>
									<sm:declareSize/>
								</sm:WImage>
							</sm:otherwise>
						</sm:chooseOnBinary>
					</sm:when>
					<sm:otherwise>
						<sm:chooseOnBinary>
							<sm:binary>
								<sm:imageSize>
									<sm:scaleFromStandardCharSize>
										<sm:ifNoStandardCharSize>
											<sm:scale ratio="0.32"/>
										</sm:ifNoStandardCharSize>
									</sm:scaleFromStandardCharSize>
								</sm:imageSize>
							</sm:binary>
							<sm:whenSize widthOver="genProp('bin.size.inline.w-int',400)*1.1" heightOver="genProp('bin.size.inline.h-int',100)*1.1">
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.inline.w-int',400)" maxHeightInPx="genProp('bin.size.inline.h-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt>
										<sm:callBinaryMeta axis="altTitle"/>
									</sm:alt>
									<sm:declareSize/>
									<sm:linkOverImage class="imgZoom">
										<sm:binaryUrl>
											<sm:imageTransform>
												<sm:scaleFromStandardCharSize>
													<sm:ifNoStandardCharSize>
														<sm:scale ratio="0.32"/>
													</sm:ifNoStandardCharSize>
												</sm:scaleFromStandardCharSize>
												<sm:sizeBounds maxWidthInPx="genProp('bin.size.zoom-int',1200)" maxHeightInPx="genProp('bin.size.zoom-int',1200)"/>
												<sm:outputPNG/>
											</sm:imageTransform>
										</sm:binaryUrl>
									</sm:linkOverImage>
								</sm:WImage>
							</sm:whenSize>
							<sm:otherwise>
								<sm:WImage>
									<sm:binaryUrl>
										<sm:imageTransform>
											<sm:scaleFromStandardCharSize>
												<sm:ifNoStandardCharSize>
													<sm:scale ratio="0.32"/>
												</sm:ifNoStandardCharSize>
											</sm:scaleFromStandardCharSize>
											<sm:sizeBounds maxWidthInPx="genProp('bin.size.inline.w-int',400)" maxHeightInPx="genProp('bin.size.inline.h-int',100)"/>
											<sm:outputPNG/>
										</sm:imageTransform>
									</sm:binaryUrl>
									<sm:alt>
										<sm:callBinaryMeta axis="altTitle"/>
									</sm:alt>
									<sm:declareSize/>
								</sm:WImage>
							</sm:otherwise>
						</sm:chooseOnBinary>
					</sm:otherwise>
				</sm:choose>
			</sm:otherwise>
		</sm:choose>
	</sm:content>
</sm:binaryXhtmlTransf>